package View;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;
import java.util.ArrayList;
import java.util.Map.Entry;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;
import javax.swing.Timer;

import Control.ChessManager;
import Control.MouseControlClick;
import Helper.Location;
import Model.King;
import Model.Pawn;
import Model.Piece;

@SuppressWarnings("serial")
public class ChessBoard extends JPanel implements Observer
{
	public static final int squareDimension = 100;
	
	Square[] squares;
	ChessManager cm;
	MouseControlClick mouseControl;
	Location selectedPiece;
	private final Color transparentGreen = new Color(0, 255, 0, 200);
	private final Color transparentRed = new Color(255, 0, 0, 150);
	private final Color transparentBlue = new Color(0, 100, 220, 220);
	private boolean scrolling = false;
	private boolean hasScrolled = false;
	private int scrollingX = 0;
	private String scrollString = "";
	Timer t = new Timer(50, new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			scrollingX += 15;
			repaint();
		}
	});
	
	public ChessBoard(ChessManager cm, MouseControlClick mouse)
	{
		this.cm = cm;
		this.mouseControl = mouse;
		mouseControl.addObserver(this);
		// added back in 
		this.addMouseListener(mouseControl);
		this.addMouseMotionListener(mouseControl);
		//
		squares = new Square[ChessManager.WIDTH * ChessManager.HEIGHT];
		for(int j = 0; j < ChessManager.HEIGHT; j ++)
		{
			for(int i = 0; i < ChessManager.WIDTH; i++)
			{
				squares[(j * ChessManager.HEIGHT) + i] = new Square(ChessBoard.squareDimension * i, 
						ChessBoard.squareDimension * j, ((j * 3 + i) % 2 == 0 ? false : true));
			}
		}
	}
	
	@Override
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		// draw squares here
		for(Square s : squares)
		{
			s.draw(g);
		}
		
		// draws who's turn it is, SIDEWAYS!
		drawWhosTurn(g);	    
		// draw coordinates on the board here
		drawBoardCoords(g);
				
		ArrayList<Entry<Location, Piece>> piecent  = new ArrayList<Entry<Location, Piece>>();
		piecent.addAll(cm.getPieces().entrySet());
		
		// draw out the pieces here with squares changed if no piece is selected
		drawValidChoice(g, piecent);
		// draw out the pieces here with squares changed if piece is selected.
		drawSelectedChoice(g);
		// draws the pictures of the pieces onto the board.
		drawPieces(g, piecent);
		// important messages
		drawImportantMessages(g);
		// draw scroller		
		scrollDraw(g);
	}
	
	private void drawValidChoice(Graphics g, ArrayList<Entry<Location, Piece>> piecent)
	{
		if(selectedPiece == null && cm.isWhiteTurn() == cm.isClient())
		{			
			for(Entry<Location, Piece> e : piecent)
			{
				if(cm.isWhiteTurn() == !e.getValue().getColor() && 
						cm.getModifiedMoves(cm.getPieceMoves(e.getKey()), e.getKey()).size() > 0)
				{
					g.setColor(this.transparentGreen);
					g.fillRect((e.getKey().getX() - 1) * ChessBoard.squareDimension, 
							Math.abs(e.getKey().getY() - 1 - 7) * ChessBoard.squareDimension, 
							ChessBoard.squareDimension, ChessBoard.squareDimension);	
				}	
			}
		}
	}
	
	private void drawSelectedChoice(Graphics g)
	{
		if(selectedPiece != null && cm.isWhiteTurn() == cm.isClient())
		{
			g.setColor(this.transparentBlue);
			g.fillRect((selectedPiece.getX() - 1) * ChessBoard.squareDimension, 
					Math.abs(selectedPiece.getY() - 1 - 7) * ChessBoard.squareDimension, 
					ChessBoard.squareDimension, ChessBoard.squareDimension);
			
			g.setColor(this.transparentGreen);
			for(Location l : cm.getModifiedMoves(cm.getPieceMoves(selectedPiece), selectedPiece))
			{
				g.fillRect((l.getX() - 1) * ChessBoard.squareDimension, 
						Math.abs(l.getY() - 1 - 7) * ChessBoard.squareDimension, 
					ChessBoard.squareDimension, ChessBoard.squareDimension);
			}
		}	
	}
	
	private void drawPieces(Graphics g, ArrayList<Entry<Location, Piece>> piecent)
	{
		for(Entry<Location, Piece> e : piecent)
		{
			g.drawImage(e.getValue().getPiecePicture(), (e.getKey().getX() - 1) * ChessBoard.squareDimension, 
					Math.abs(e.getKey().getY() - 1 - 7) * ChessBoard.squareDimension, 
					ChessBoard.squareDimension, ChessBoard.squareDimension, null);
		}
	}
	
	private void drawBoardCoords(Graphics g)
	{
		g.setColor(Color.RED);
		Font f = new Font("", Font.BOLD, ChessBoard.squareDimension / 5);
		g.setFont(f);
		char[] codes = new char[]{'a','b','c','d','e','f','g','h'};
		for(int j = 0; j < ChessManager.WIDTH; j++)
		{
			g.drawChars(codes, j, 1,  ChessBoard.squareDimension * j + (int)(ChessBoard.squareDimension *0.5f), 
					(ChessBoard.squareDimension * (ChessManager.HEIGHT - 1)) + (int)(ChessBoard.squareDimension * 1.3f));
			g.drawString("" + (ChessManager.HEIGHT - j), 
					(ChessBoard.squareDimension * (ChessManager.WIDTH - 1)) + (int)(ChessBoard.squareDimension * 1.1f),// + 25,
					ChessBoard.squareDimension * j + ChessBoard.squareDimension / 2);
		}
	}
	
	private void drawWhosTurn(Graphics g)
	{
		g.setColor(Square.BLACK);
		g.fillRect((ChessBoard.squareDimension * ChessManager.WIDTH) + ChessBoard.squareDimension / 2, 0, ChessBoard.squareDimension + ChessBoard.squareDimension * 2, ChessBoard.squareDimension * ChessManager.HEIGHT);
		
		Graphics2D g2d = (Graphics2D) g;
		AffineTransform orig = g2d.getTransform();
		AffineTransform at = new AffineTransform();
	    at.setToRotation(-Math.PI / 2.0);
	    g2d.setTransform(at);
	    g2d.setFont(new Font("", Font.BOLD, ChessBoard.squareDimension));
	    g2d.setColor(Color.WHITE);
	    String color = cm.isWhiteTurn() ? "white's" : "black's";
	    g2d.drawString("It's " + color + " turn.",(ChessBoard.squareDimension * ChessManager.WIDTH - (ChessBoard.squareDimension / 3)) * -1, (int)(ChessBoard.squareDimension * ChessManager.WIDTH + (ChessBoard.squareDimension * 1.5)));
	    g2d.setTransform(orig);
	}
	
	private void drawImportantMessages(Graphics g)
	{
		g.setColor(this.transparentRed);
		g.setFont(new Font("TimesRoman", Font.PLAIN, ChessBoard.squareDimension / 2));
		
		
		if(!scrolling && !hasScrolled && cm.isInCheckMate())
		{
			scroller("CheckMate: " + (cm.isWhiteTurn() != cm.isClient() ? "You Win!" : "You Lose!"));
		}
		else if(!scrolling && !hasScrolled && cm.isInStaleMate())
		{
			scroller("StaleMate!");
		}
		else if(!scrolling && !hasScrolled && cm.isInCheck())
		{
			if(cm.isWhiteTurn() == cm.isClient())
			{
				scroller("You're in check!");
			}
		} 
		else if(scrolling)
		{
			if(scrollingX > ChessBoard.squareDimension * ChessManager.WIDTH + 200)
			{
				t.stop();
				scrolling = false;
				hasScrolled = true;
				repaint();
			}
		} 
		else 
		{
			hasScrolled = false;
		}
	}
	
	private void scroller(String s) {
		scrolling = true;
		scrollString = s;
		scrollingX = 0;
		t.start();
	}
	
	private void scrollDraw(Graphics g) {
		g.setFont(new Font("TimesRoman", Font.PLAIN, ChessBoard.squareDimension / 2));
		g.setColor(transparentRed);
		g.drawString(scrollString, scrollingX, ChessBoard.squareDimension * ChessManager.HEIGHT / 2);
	}
	
	
	private void sendMove(Location start, Location end)
	{
			StringBuilder moveString = new StringBuilder();
			moveString.append(start.toString() + " " + end.toString());
			
			Piece p = cm.getPieces().get(start);
			int color = cm.getPieces().get(start).getColor() ? 1 : -1 ;
			boolean sendMove = true;
			
			
			//pawn promotion
			if(p instanceof Pawn && (end.getY() == 8 || end.getY() == 1)) {
				Popup pop = new Popup();
				pop.askPiece(cm.getPieces().get(start).getColor(), start, end, cm);
				sendMove = false;
			}
			// put capturing part here
			else if(cm.getPieces().get(end) != null)
			{
				moveString.append("*");
			}
			// en passant
			else if((p instanceof Pawn && cm.getPieces().get(new Location(end.getX(), end.getY() + (1 * color))) instanceof Pawn &&
					p.getColor() != cm.getPieces().get(new Location(end.getX(), end.getY() + (1 * color))).getColor()))
			{
				moveString.append("!");
			}
			
			
			// castling
			else if(p instanceof King && Math.abs(start.difference(end).getX()) == 2)
			{
				if(start.difference(end).getX() < 0)
				{
					moveString.append(" h" + start.getY() + " f" + start.getY()); // h8 f8
				}
				else if(start.difference(end).getX() > 0)
				{
					moveString.append(" a" + start.getY() + " d" + start.getY());
				}
			}  
			
			if(sendMove)
			{
				cm.recievePlay(moveString.toString());
			}
	}

	@Override
	public void update(Observable o, Object arg1)
	{
		MouseControlClick mc = (MouseControlClick) o;
		
		if(mc.newClick() && (cm.isWhiteTurn() == cm.isClient())) {
			Location movePieceTo = null;
			int mouseClickX = (mc.getLastClickX() / ChessBoard.squareDimension) + 1;
			int mouseClickY = Math.abs(((mc.getLastClickY() / ChessBoard.squareDimension)) - 8);
			Location clicked = new Location(mouseClickX, mouseClickY);
			Piece p = cm.getPieces().get(clicked);
			
			if(selectedPiece != null && cm.getModifiedMoves(cm.getPieceMoves(selectedPiece), selectedPiece).contains(clicked))
			{
				movePieceTo = clicked;
				p = null;
				sendMove(selectedPiece, movePieceTo);
				
				selectedPiece = null;
			}
			else if(p != null && p.getColor() != cm.isWhiteTurn() && cm.getPieces().containsKey(clicked))
			{
				selectedPiece = clicked;			
			}	
			else
			{
				selectedPiece = null;
			}
			
			this.repaint();
		}
	}
}
